{"version":3,"sources":["../node_modules/unist-builder/lib/index.js","../src/utils.ts","../src/directive.ts","../src/transform.ts","../src/seqviz.ts"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef {Array<Node> | string} ChildrenOrValue\n *   List to use as `children` or value to use as `value`.\n *\n * @typedef {Record<string, unknown>} Props\n *   Other fields to add to the node.\n */\n\n/**\n * Build a node.\n *\n * @template {string} T\n * @template {Props} P\n * @template {Array<Node>} C\n *\n * @overload\n * @param {T} type\n * @returns {{type: T}}\n *\n * @overload\n * @param {T} type\n * @param {P} props\n * @returns {{type: T} & P}\n *\n * @overload\n * @param {T} type\n * @param {string} value\n * @returns {{type: T, value: string}}\n *\n * @overload\n * @param {T} type\n * @param {P} props\n * @param {string} value\n * @returns {{type: T, value: string} & P}\n *\n * @overload\n * @param {T} type\n * @param {C} children\n * @returns {{type: T, children: C}}\n *\n * @overload\n * @param {T} type\n * @param {P} props\n * @param {C} children\n * @returns {{type: T, children: C} & P}\n *\n * @param {string} type\n *   Node type.\n * @param {ChildrenOrValue | Props | null | undefined} [props]\n *   Fields assigned to node (default: `undefined`).\n * @param {ChildrenOrValue | null | undefined} [value]\n *   Children of node or value of `node` (cast to string).\n * @returns {Node}\n *   Built node.\n */\nexport function u(type, props, value) {\n  /** @type {Node} */\n  const node = {type: String(type)}\n\n  if (\n    (value === undefined || value === null) &&\n    (typeof props === 'string' || Array.isArray(props))\n  ) {\n    value = props\n  } else {\n    Object.assign(node, props)\n  }\n\n  if (Array.isArray(value)) {\n    // @ts-expect-error: create a parent.\n    node.children = value\n  } else if (value !== undefined && value !== null) {\n    // @ts-expect-error: create a literal.\n    node.value = String(value)\n  }\n\n  return node\n}\n","import type { VFile } from 'vfile';\nimport type { DirectiveData } from 'myst-common';\nimport { u } from 'unist-builder';\n\nexport function validateStringOptions(\n  vfile: VFile,\n  fieldName: string,\n  field: unknown,\n  validValues?: string[],\n) {\n  const notString = typeof field !== 'string';\n  const invalidValues = validValues && typeof field === 'string' && !validValues.includes(field);\n  if (notString) vfile.message(`Invalid ${fieldName} supplied.`);\n  if (invalidValues)\n    vfile.message(`Invalid ${fieldName} supplied must be one of (${validValues.join(' | ')}).`);\n}\n\nexport function makePlaceholder(data: DirectiveData, description: string) {\n  const optionList = data.options\n    ? [\n        u(\n          'ul',\n          Object.entries(data.options)?.map(([key, value]) =>\n            u('listItem', [u('inlineCode', key), u('text', `: ${String(value)}`)]),\n          ) ?? [],\n        ),\n      ]\n    : [];\n\n  return [\n    u('admonition', { kind: 'important' }, [\n      u('admonitionTitle', [u('inlineCode', [u('text', data.name)])]),\n      u('paragraph', [\n        u('text', 'This block will be replaced with '),\n        u('strong', [u('text', description)]),\n        u('text', ' when deployed to '),\n        u('link', { url: 'https://curvenote.com' }, [u('text', 'Curvenote')]),\n        u('text', '.'),\n      ]),\n      u('paragraph', [u('text', 'Options:'), ...optionList]),\n    ]),\n  ];\n}\n","import { u } from \"unist-builder\";\nimport { makePlaceholder } from \"./utils\";\n\nexport const seqVizDirective = {\n  name: \"seqviz\",\n  doc: \"A directive that will load seqparse compatible files and setup visualization using the SegViz library.\",\n  arg: { type: String, doc: \"The path to the file to load and parse.`\" },\n  options: {\n    height: { type: String, doc: \"The height of the visualization.`\" },\n    class: { type: String, doc: \"The tailwind classes to apply.`\" },\n  },\n  run(data, vfile) {\n    const block = u(\n      \"block\",\n      {\n        kind: \"seqviz\",\n        data: {\n          file: data.arg,\n          class: data.options?.class ?? \"\",\n          height: data.options?.height ?? \"600px\",\n        },\n      },\n      makePlaceholder(data, data.arg as string)\n    );\n    return [block];\n  },\n};\n","import seqparse from \"seqparse\";\n\nexport const seqparseTransform = {\n  name: \"seqviz-seqparse\",\n  doc: \"A transform that parses an inoming file and prepares a SeqViz model.\",\n  stage: \"document\",\n  plugin: (_, utils) => async (node) => {\n    const nodes = utils.selectAll(\"block[kind='seqviz']\", node) ?? [];\n    console.log(\"NODES\", nodes.length);\n    await Promise.all(\n      nodes.map(async (seqvizNode) => {\n        const { file, class: className, height } = seqvizNode.data;\n        const { name, type, seq, annotations } = await seqparse(file);\n        seqvizNode.data = {\n          ...seqvizNode.data,\n          name,\n          type,\n          seq,\n          annotations,\n          class: className,\n          height,\n        };\n      })\n    );\n  },\n};\n","import { seqVizDirective } from \"./directive\";\nimport { seqparseTransform } from \"./transform\";\n\nconst plugin = {\n  name: \"SeqViz Plugin for MyST Markdown\",\n  directives: [seqVizDirective],\n  transforms: [seqparseTransform],\n};\n\nexport default plugin;\n"],"mappings":"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","names":[]}